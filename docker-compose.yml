version: '3.4'
networks:
  default:
    ipam:
      driver: ${DRIVER}
      config:
        - subnet: ${SUBNET}
services:
  database:
    image: mysql/mysql-server:8.0
    hostname: database
    restart: always
    env_file: env/database.env
    volumes:
      - ${BASE_DIR}/etc/my.cnf:/etc/my.cnf
      - ${DATA_DIR}/mysql:/var/lib/mysql
      - ${LOGS_DIR}/database:/var/log
      - ${BASE_DIR}/initializers/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 3306:3306
  cache:
    image: redis:3.2
    hostname: cache
    restart: always
    volumes:
      - ${DATA_DIR}/cache:/data
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 6379:6379
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.6.0
    hostname: elasticsearch
    restart: always
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      bootstrap.memory_lock: 'true'
      cluster.initial_master_nodes: elasticsearch
      cluster.name: docker-cluster
      node.name: elasticsearch
    volumes:
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - ${DATA_DIR}/elastic:/usr/share/elasticsearch/data
      - ${DATA_DIR}/elastic_snapshots:/elastic_snapshots
      - ${BASE_DIR}/etc/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 9200:9200
    ulimits:
      memlock:
        hard: -1
        soft: -1
  copyservice:
    image: ${DOCKER_REGISTRY}/pyats-web-copyservice:${TAG}
    hostname: copyservice
    env_file: env/database.env
    environment:
      UPLOAD_FOLDER: /usr/src/copyservice/uploads
      UPLOAD_RESULT_FOLDER: /usr/src/copyservice/uploads/archives/zipped
      NGINX_URL: ${ADVERTISED_URL}
      SERVICE_LOGS_DIR: /s3/logs
      DB_HOST: database
      DATABASE_KEY: prod
    volumes:
      - ${DATA_DIR}/copyservice:/usr/src/copyservice/uploads
      - ${LOGS_DIR}/copyservice:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 9999:9999
    depends_on:
      - database
      - management
    labels:
      com.cisco.s3.component: copyservice
      com.cisco.s3.component.type: microservice
  management:
    image: ${DOCKER_REGISTRY}/pyats-web-management:${TAG}
    hostname: management
    restart: always
    environment:
      MGMT_INIT_SETTINGS: /initializers/settings.yml
      ADVERTISED_URL: ${ADVERTISED_URL}
      INSTANCE_ID: ${INSTANCE_ID}
      TOOL_NAME: ${TOOL_NAME}
      FORCE_UPDATE: 'False'
      MGMT_DYNAMIC_SETTINGS: /initializers/new_settings.yml
      SERVICE_LOGS_DIR: /s3/logs
    volumes:
      - ${BASE_DIR}/etc/mgmt_settings.py:/s3/src/settings.py
      - ${BASE_DIR}/initializers:/initializers
      - ${LOGS_DIR}/management:/s3/logs
      - ${DOCKER_SOCK}:/var/run/docker.sock
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    healthcheck:
      interval: 10m
      retries: 2
      start_period: 2m
      test:
        - CMD
        - python
        - manage.py
        - restart_unhealthy_containers
      timeout: 1m
    # ports:
    # - 8000:8000
    labels:
      com.cisco.s3.component: management
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
  sessions:
    image: ${DOCKER_REGISTRY}/pyats-web-sessions:${TAG}
    hostname: sessions
    restart: always
    environment:
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/sessions:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8900:8000
    labels:
      com.cisco.s3.component: sessions
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  auths:
    image: ${DOCKER_REGISTRY}/pyats-web-auths:${TAG}
    hostname: auths
    restart: always
    environment:
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/auths:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8901:8000
    labels:
      com.cisco.s3.component: auths
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  users:
    image: ${DOCKER_REGISTRY}/pyats-web-users:${TAG}
    hostname: users
    restart: always
    env_file: env/users.env
    volumes:
      - ${LOGS_DIR}/users:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8902:8000
    labels:
      com.cisco.s3.component: users
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  users-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-users:${TAG}
    hostname: users_celery
    restart: always
    env_file: env/users.env
    volumes:
      - ${LOGS_DIR}/users:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: users
      com.cisco.s3.component.type: celery
    depends_on:
      - users
    command: celery -A user_profiles worker -l info -E
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A user_profiles -d celery@users_celery || exit 1
  users-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-users:${TAG}
    hostname: users_beat
    restart: always
    env_file: env/users.env
    volumes:
      - ${LOGS_DIR}/users:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: users
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - users
    command:
      - wait-for-it.sh
      - users:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A user_profiles beat -l info --pidfile='
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  groups:
    image: ${DOCKER_REGISTRY}/pyats-web-groups:${TAG}
    hostname: groups
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: group_management.celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/groups:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8903:8000
    labels:
      com.cisco.s3.component: groups
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  groups-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-groups:${TAG}
    hostname: groups_celery
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: group_management.celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/groups:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: groups
      com.cisco.s3.component.type: celery
    depends_on:
      - groups
    command: celery -A group_management.celery worker -l info -E
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A group_management.celery -d celery@groups_celery || exit 1
  groups-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-groups:${TAG}
    hostname: groups_beat
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: group_management.celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/groups:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: groups
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - groups
    command:
      - wait-for-it.sh
      - groups:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A group_management.celery beat -l info -S django'
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  resources:
    image: ${DOCKER_REGISTRY}/pyats-web-resources:${TAG}
    hostname: resources
    restart: always
    environment:
      DATABASE_TIMEOUT: 30000
      ELASTIC_HOSTS: http://elasticsearch:9200
      ELASTIC_INDEX: resources
      MGMT_SERVICE_URL: http://management:8000/management/api/
      NODE_ENV: production
      TAG_CLEAN_INTERVAL: 86400000
      TAG_INDEX: resource_tags
    depends_on:
      - database
      - cache
      - elasticsearch
      - management
    command:
      - wait-for-it.sh
      - elasticsearch:9200
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'supervisord -c /s3/supervisord.conf'
    volumes:
      - ${LOGS_DIR}/resources:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8904:8000
    labels:
      com.cisco.s3.component: resources
      com.cisco.s3.component.type: microservice
  communications:
    image: ${DOCKER_REGISTRY}/pyats-web-communications:${TAG}
    hostname: communications
    restart: always
    environment:
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/templates:/s3/templates
      - ${LOGS_DIR}/communications:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8908:8000
    labels:
      com.cisco.s3.component: communications
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  history:
    image: ${DOCKER_REGISTRY}/pyats-web-history:${TAG}
    hostname: history
    restart: always
    environment:
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/history:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8909:8000
    labels:
      com.cisco.s3.component: history
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  qmgr:
    image: ${DOCKER_REGISTRY}/pyats-web-qmgr:${TAG}
    hostname: qmgr
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: qmgr_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/qmgr:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8910:8000
    labels:
      com.cisco.s3.component: qmgr
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  qmgr-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-qmgr:${TAG}
    hostname: qmgr_celery
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: qmgr_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/qmgr:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: qmgr
      com.cisco.s3.component.type: celery
    depends_on:
      - qmgr
    command: celery -A qmgr_celery worker -l info -E
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A qmgr_celery -d celery@qmgr_celery || exit 1
  qmgr-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-qmgr:${TAG}
    hostname: qmgr_beat
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: qmgr_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/qmgr:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: qmgr
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - qmgr
    command:
      - wait-for-it.sh
      - qmgr:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A qmgr_celery beat -l info -S django --pidfile='
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  topoman:
    image: ${DOCKER_REGISTRY}/pyats-web-topoman:${TAG}
    hostname: topoman
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: topoman
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/testbed/images:/s3/images
      - ${LOGS_DIR}/topoman:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8912:8000
    labels:
      com.cisco.s3.component: topoman
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  topoman-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-topoman:${TAG}
    hostname: topoman_celery
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: topoman
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/testbed/images:/s3/images
      - ${LOGS_DIR}/topoman:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: topoman
      com.cisco.s3.component.type: celery
    depends_on:
      - topoman
    command: celery -A topoman worker -l debug -E --logfile=/s3/logs/celery.log
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A topoman -d celery@topoman_celery || exit 1
  topoman-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-topoman:${TAG}
    hostname: topoman_beat
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: topoman
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/testbed/images:/s3/images
      - ${LOGS_DIR}/topoman:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: topoman
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - topoman
    command:
      - wait-for-it.sh
      - topoman:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A topoman beat -l info --pidfile='
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  laas:
    image: ${DOCKER_REGISTRY}/pyats-web-laas:${TAG}
    hostname: laas
    restart: always
    environment:
      TOPOLOGIES_DIR: /s3/topologies/
      CELERY_TASK_DEFAULT_QUEUE: s3_laas
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/virl:/s3/topologies
      - ${DATA_DIR}/topology/images:/s3/images
      - ${LOGS_DIR}/laas:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8913:8000
    labels:
      com.cisco.s3.component: laas
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  laas-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-laas:${TAG}
    hostname: laas_celery
    restart: always
    environment:
      TOPOLOGIES_DIR: /s3/topologies/
      CELERY_TASK_DEFAULT_QUEUE: s3_laas
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/virl:/s3/topologies
      - ${DATA_DIR}/topology/images:/s3/images
      - ${LOGS_DIR}/laas:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: laas
      com.cisco.s3.component.type: celery
    depends_on:
      - laas
    command: celery -A s3_laas worker -l debug -E --logfile=/s3/logs/celery.log
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A s3_laas -d celery@laas_celery || exit 1
  laas-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-laas:${TAG}
    hostname: laas_beat
    restart: always
    environment:
      TOPOLOGIES_DIR: /s3/topologies/
      CELERY_TASK_DEFAULT_QUEUE: s3_laas
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/virl:/s3/topologies
      - ${DATA_DIR}/topology/images:/s3/images
      - ${LOGS_DIR}/laas:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: laas
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - laas
    command:
      - wait-for-it.sh
      - laas:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A s3_laas beat -l info -S django'
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  registry:
    image: ${DOCKER_REGISTRY}/pyats-web-registry:${TAG}
    hostname: registry
    restart: always
    environment:
      YAML_STORAGE: /s3/yamls/
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/yaml/cleans:/s3/yamls
      - ${LOGS_DIR}/registry:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8914:8000
    labels:
      com.cisco.s3.component: registry
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
      - genie
    command:
      - wait-for-it.sh
      - genie:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - '/s3/entrypoint.sh'
  registry-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-registry:${TAG}
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: jobs.celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/yaml/cleans:/s3/yamls
      - ${LOGS_DIR}/registry:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: registry
      com.cisco.s3.component.type: celery
    depends_on:
      - registry
    command: celery -A jobs.celery worker -l info -E
  results:
    image: ${DOCKER_REGISTRY}/pyats-web-results:${TAG}
    hostname: results
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: s3_results.results_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/archives/cached:/s3/archives/cached
      - ${DATA_DIR}/archives/zipped:/s3/archives/zipped
      - ${LOGS_DIR}/results:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8915:8000
    labels:
      com.cisco.s3.component: results
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  results-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-results:${TAG}
    hostname: results_celery
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: s3_results.results_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/archives/cached:/s3/archives/cached
      - ${DATA_DIR}/archives/zipped:/s3/archives/zipped
      - ${LOGS_DIR}/results:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: results
      com.cisco.s3.component.type: celery
    depends_on:
      - results
    command: celery -A s3_results.results_celery worker -l info -E
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A s3_results.results_celery -d celery@results_celery || exit 1
  results-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-results:${TAG}
    hostname: results_beat
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: s3_results.results_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/archives/cached:/s3/archives/cached
      - ${DATA_DIR}/archives/zipped:/s3/archives/zipped
      - ${LOGS_DIR}/results:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: results
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - results
    command:
      - wait-for-it.sh
      - results:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A s3_results.results_celery beat -l info -S django'
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  results2:
    image: ${DOCKER_REGISTRY}/pyats-web-results2:${TAG}
    hostname: results2
    restart: always
    env_file: env/database.env
    environment:
      ENABLE_BASELINE: 'True'
      AUTO_GENERATE_RESULT_ID: 'False'
      MGMT_SERVICE_URL: http://management:8000/management/api/
      ADVERTISED_URL: ${ADVERTISED_URL}
    volumes:
      - ${DATA_DIR}/archives/cached:/s3/archives/cached
      - ${DATA_DIR}/archives/zipped:/s3/archives/zipped
      - ${DATA_DIR}/copyservice/archives/zipped:/s3/copyservice/archives/zipped
      - ${LOGS_DIR}/results2:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8915:8000
    labels:
      com.cisco.s3.component: results2
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  jenkinsengine:
    image: ${DOCKER_REGISTRY}/pyats-web-jenkinsengine:${TAG}
    hostname: jenkinsengine
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: je_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/jenkinsengine:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8916:8000
    labels:
      com.cisco.s3.component: jenkinsengine
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  jenkinsengine-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-jenkinsengine:${TAG}
    hostname: jenkinsengine_celery
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: je_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/jenkinsengine:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: jenkinsengine
      com.cisco.s3.component.type: celery
    depends_on:
      - jenkinsengine
    command: celery -A je_celery worker -l info -E
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A je_celery -d celery@jenkinsengine_celery || exit 1
  jenkinsengine-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-jenkinsengine:${TAG}
    hostname: jenkinsengine_beat
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: je_celery
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/jenkinsengine:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: jenkinsengine
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - jenkinsengine
    command:
      - wait-for-it.sh
      - jenkinsengine:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A je_celery beat -l info -S django'
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  requests:
    image: ${DOCKER_REGISTRY}/pyats-web-requests:${TAG}
    hostname: requests
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: request_service
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/requests:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8917:8000
    labels:
      com.cisco.s3.component: requests
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  requests-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-requests:${TAG}
    hostname: requests_celery
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: request_service
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/requests:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: requests
      com.cisco.s3.component.type: celery
    depends_on:
      - requests
    command: celery -A request_service worker -l debug -E --logfile=/s3/logs/celery.log
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A request_service -d celery@requests_celery || exit 1
  requests-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-requests:${TAG}
    hostname: requests_beat
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: request_service
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/requests:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: requests
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - requests
    command:
      - wait-for-it.sh
      - requests:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A request_service beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile='
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  labvpn:
    image: ${DOCKER_REGISTRY}/pyats-web-labvpn:${TAG}
    hostname: labvpn
    restart: always
    environment:
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/labvpn:/s3/logs
      - ${DOCKER_SOCK}:/var/run/docker.sock
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8918:8000
    labels:
      com.cisco.s3.component: labvpn
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  cdets:
    image: ${DOCKER_REGISTRY}/pyats-web-cdets:${TAG}
    hostname: cdets
    restart: always
    env_file: env/database.env
    environment:
      SERVICE_LOGS_DIR: /s3/logs
      CELERY_TASK_DEFAULT_QUEUE: cdets_service
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/cdets:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8919:8000
    labels:
      com.cisco.s3.component: cdets
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  cdets-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-cdets:${TAG}
    hostname: cdets_celery
    restart: always
    environment:
      SERVICE_LOGS_DIR: /s3/logs
      CELERY_TASK_DEFAULT_QUEUE: cdets_service
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/cdets:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: cdets
      com.cisco.s3.component.type: celery
    depends_on:
      - cdets
    command:
      - bash
      - -c
      - 'celery -A retrial_celery worker -l debug -E -Q cdets_service,run --logfile=/s3/logs/celery_default.log'
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A retrial_celery -d celery@cdets_celery || exit 1
  cdets-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-cdets:${TAG}
    hostname: cdets_beats
    restart: always
    environment:
      SERVICE_LOGS_DIR: /s3/logs
      CELERY_TASK_DEFAULT_QUEUE: cdets_service
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/cdets:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: cdets
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - cdets
    command:
      - wait-for-it.sh
      - cdets:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A retrial_celery beat -l info --pidfile='
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  genie:
    image: ${DOCKER_REGISTRY}/pyats-web-genie:${TAG}
    hostname: genie
    restart: always
    env_file: env/database.env
    environment:
      MEDIA_BASE_DIR: /s3/
      SERVICE_LOGS_DIR: /s3/logs
      CELERY_TASK_DEFAULT_QUEUE: genie_service
      LOCAL_SETTINGS_MODULE: local_settings
      CONTROLLER_URL: http://controller:8000/controller/api/
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/genie/media:/s3/media
      - ${DATA_DIR}/genie/static:/s3/static
      - ${DATA_DIR}/genie/images:/s3/images
      - ${LOGS_DIR}/genie:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8920:8000
    labels:
      com.cisco.s3.component: genie
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - management
  genie-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-genie:${TAG}
    hostname: genie_celery
    restart: always
    environment:
      MEDIA_BASE_DIR: /s3/
      SERVICE_LOGS_DIR: /s3/logs
      CELERY_TASK_DEFAULT_QUEUE: genie_service
      LOCAL_SETTINGS_MODULE: local_settings
      CONTROLLER_URL: http://controller:8000/controller/api/
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/genie/media:/s3/media
      - ${DATA_DIR}/genie/static:/s3/static
      - ${DATA_DIR}/genie/images:/s3/images
      - ${LOGS_DIR}/genie:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: genie
      com.cisco.s3.component.type: celery
    depends_on:
      - genie
    command: celery -A genies_celery worker -l debug -E --logfile=/s3/logs/celery.log
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A genies_celery -d celery@genie_celery || exit 1
  genie-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-genie:${TAG}
    hostname: genie_beat
    restart: always
    environment:
      MEDIA_BASE_DIR: /s3/
      SERVICE_LOGS_DIR: /s3/logs
      CELERY_TASK_DEFAULT_QUEUE: genie_service
      LOCAL_SETTINGS_MODULE: local_settings
      CONTROLLER_URL: http://controller:8000/controller/api/
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${DATA_DIR}/genie/media:/s3/media
      - ${DATA_DIR}/genie/static:/s3/static
      - ${DATA_DIR}/genie/images:/s3/images
      - ${LOGS_DIR}/genie:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    labels:
      com.cisco.s3.component: genie
      com.cisco.s3.component.type: celery-beat
    depends_on:
      - genie
    command:
      - wait-for-it.sh
      - genie:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'celery -A genies_celery beat -l info --pidfile='
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  controller:
    image: ${DOCKER_REGISTRY}/pyats-web-taas-controller:${TAG}
    hostname: controller
    restart: always
    env_file: env/database.env
    environment:
      SERVICE_LOGS_DIR: /s3/logs
      HISTORY_SERVICE_URL: http://history:8000/history/api/
      MGMT_SERVICE_URL: http://management:8000/management/api/
      IMAGE_LOG_DIR: /s3/data
      REDIS_HOST: cache
      WS_HOST: wsgateway
      WS_PORT: '8000'
      IMAGE_LOG_DIR: /s3/data
      RESULT_SERVICE_URL: ${ADVERTISED_URL}
      RESULTS_ENDPOINT: api/v1/upload/results
      IMAGE_LOG_DIR: /s3/data
    volumes:
      - ${DATA_DIR}/controller:/s3/data
      - ${LOGS_DIR}/controller:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8921:8000
    labels:
      com.cisco.s3.component: controller
      com.cisco.s3.component.type: microservice
    depends_on:
      - database
      - cache
      - wsgateway
    command:
     - wait-for-it.sh
     - database:3306
     - --timeout=${WAIT_TIMEOUT}
     - --strict
     - --
     - bash
     - -c
     - "/taas/entrypoint.sh"
  plugins:
    image: ${DOCKER_REGISTRY}/pyats-web-plugins:${TAG}
    hostname: plugins
    restart: always
    env_file: env/database.env
    environment:
      SERVICE_LOGS_DIR: /s3/logs
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
    volumes:
      - ${LOGS_DIR}/plugins:/s3/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8924:8000
    labels:
      com.cisco.s3.component: plugins
      com.cisco.s3.component.type: microservice
    depends_on:
    - management
  aggregator:
    image: ${DOCKER_REGISTRY}/pyats-web-aggregator:${TAG}
    hostname: aggregator
    restart: always
    environment:
      SERVICE_LOGS_DIR: /s3/logs
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
      EXTERNAL_KAFKA_HOSTS: sjc-ddkafka-01.cisco.com:9092,sjc-ddkafka-02.cisco.com:9092,sjc-ddkafka-03.cisco.com:9092,sjc-ddkafka-04.cisco.com:9092,sjc-ddkafka-05.cisco.com:9092
      EXTERNAL_KAFKA_TOPIC: C2k8NxB5hTiF.xpresso_aggregator
      EXTERNAL_KAFKA_REQUEST_TOPIC: C2k8NxB5hTiF.xpresso_requests
    volumes:
    - ${LOGS_DIR}/aggregator:/s3/logs
    ports:
    - 8926:8000
    labels:
      com.cisco.s3.component: aggregator
      com.cisco.s3.component.type: microservice
    depends_on:
    - gateway
    - database
    - cache
  aggregator-celery:
    image: ${DOCKER_REGISTRY}/pyats-web-aggregator:${TAG}
    hostname: aggregator_celery
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: agg_request
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
      EXTERNAL_KAFKA_HOSTS: sjc-ddkafka-01.cisco.com:9092,sjc-ddkafka-02.cisco.com:9092,sjc-ddkafka-03.cisco.com:9092,sjc-ddkafka-04.cisco.com:9092,sjc-ddkafka-05.cisco.com:9092
      EXTERNAL_KAFKA_TOPIC: C2k8NxB5hTiF.xpresso_aggregator
      EXTERNAL_KAFKA_REQUEST_TOPIC: C2k8NxB5hTiF.xpresso_requests
    volumes:
    - ${LOGS_DIR}/aggregator:/s3/logs
    labels:
      com.cisco.s3.component: aggregator
      com.cisco.s3.component.type: celery
    depends_on:
    - aggregator
    command: celery -A agg_request worker -l debug -E --logfile=/s3/logs/celery.log
    healthcheck:
      interval: 1m
      start_period: 30s
      test: celery inspect ping -A agg_request -d celery@aggregator_celery || exit 1
  aggregator-beat:
    image: ${DOCKER_REGISTRY}/pyats-web-aggregator:${TAG}
    hostname: aggregator_beat
    restart: always
    environment:
      CELERY_TASK_DEFAULT_QUEUE: agg_request
      LOCAL_SETTINGS_MODULE: local_settings
      MGMT_SERVICE_URL: http://management:8000/management/api/
      EXTERNAL_KAFKA_HOSTS: sjc-ddkafka-01.cisco.com:9092,sjc-ddkafka-02.cisco.com:9092,sjc-ddkafka-03.cisco.com:9092,sjc-ddkafka-04.cisco.com:9092,sjc-ddkafka-05.cisco.com:9092
      EXTERNAL_KAFKA_TOPIC: C2k8NxB5hTiF.xpresso_aggregator
      EXTERNAL_KAFKA_REQUEST_TOPIC: C2k8NxB5hTiF.xpresso_requests
    volumes:
    - ${LOGS_DIR}/aggregator:/s3/logs
    - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    labels:
      com.cisco.s3.component: aggregator
      com.cisco.s3.component.type: celery-beat
    depends_on:
    - aggregator
    command:
    - wait-for-it.sh
    - aggregator:8000
    - --timeout=${WAIT_TIMEOUT}
    - --strict
    - --
    - bash
    - -c
    - "celery -A agg_request beat -l info"
    healthcheck:
      interval: 1m
      start_period: 2m
      test: python manage.py beat_health_check || exit 1
  gateway:
    image: ${DOCKER_REGISTRY}/pyats-web-gateway:${TAG}
    hostname: gateway
    restart: always
    environment:
      CORS_DOMAINS: '*'
      NODE_ENV: production
      MGMT_SERVICE_URL: http://management:8000/management/api/
    depends_on:
      - auths
      - users
      - groups
      - sessions
      - management
    volumes:
      - ${LOGS_DIR}/gateway:/s3/logs
      - ./wait-for-it.sh:/usr/local/bin/wait-for-it.sh
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8923:8000
    labels:
      com.cisco.s3.component: gateway
      com.cisco.s3.component.type: microservice
    command:
      - wait-for-it.sh
      - management:8000
      - --timeout=${WAIT_TIMEOUT}
      - --strict
      - --
      - bash
      - -c
      - 'supervisord -c /s3/supervisord.conf'
  client:
    image: ${DOCKER_REGISTRY}/pyats-web-client:${TAG}
    hostname: client
    restart: always
    volumes:
      - ${BASE_DIR}/etc/nginx.conf:/etc/nginx/conf.d/default.conf
      ## - ${BASE_DIR}/etc/xpresso.pem:/etc/nginx/certs/xpresso.pem
      ## - ${BASE_DIR}/etc/xpresso.key:/etc/nginx/certs/xpresso.key
      - ${DATA_DIR}/topology/images:/s3/images
      - ${DATA_DIR}/upload:/upload
      - ${DATA_DIR}/copyservice:/usr/src/copyservice/uploads
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    depends_on:
      - gateway
      - controller
    ports:
      - 80:80
      - 443:443
  workers:
    image: ${DOCKER_REGISTRY}/pyats-web-taas-worker:${TAG}
    hostname: workers
    restart: always
    env_file: env/workers.env
    environment:
      WORK_SOURCE: $PWD/data/workers
      WORKER_LABEL: pyats-worker-1
      WS_HOST: wsgateway
      WS_PORT: '8000'
      BUILDER_IMAGE_NAME: ${DOCKER_REGISTRY}/image-builder:${TAG}
      SERVICE_URL: ${ADVERTISED_URL}:8925/workers/api/v1
    volumes:
      - ${LOGS_DIR}/workers:/s3/logs
      - ${DATA_DIR}/workers:/s3/workers
      - ${DATA_DIR}/persistent:/s3/persistent
      - ${DOCKER_SOCK}:/var/run/docker.sock
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8925:8000
    depends_on:
      - wsgateway
    labels:
      com.cisco.s3.component: workers
      com.cisco.s3.component.type: microservice
  wsgateway:
    image: ${DOCKER_REGISTRY}/pyats-web-wsgateway:${TAG}
    hostname: wsgateway
    restart: always
    environment:
      REDIS_HOST: cache
      SERVICE_LOGS_DIR: /taas/logs
    volumes:
      - ${LOGS_DIR}/wsgateway:/taas/logs
    # - /etc/localtime:/etc/localtime:ro
    # - /etc/timezone:/etc/timezone:ro
    # ports:
    # - 8927:8000
    depends_on:
      - cache
    labels:
      com.cisco.s3.component: wsgateway
      com.cisco.s3.component.type: microservice
